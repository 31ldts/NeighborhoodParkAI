.TH "Basics.Position" 3 "My Project" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Basics.Position \- Position Represents a 2D point, and has methods to operate with them\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBPosition\fP ()"
.br
.ti -1c
.RI "\fBPosition\fP (int n)"
.br
.ti -1c
.RI "\fBPosition\fP (int x, int y)"
.br
.ti -1c
.RI "\fBPosition\fP (\fBPosition\fP p)"
.br
.ti -1c
.RI "int \fBgetX\fP ()"
.br
.ti -1c
.RI "int \fBgetY\fP ()"
.br
.ti -1c
.RI "void \fBsetX\fP (int x)"
.br
.ti -1c
.RI "void \fBsetY\fP (int y)"
.br
.ti -1c
.RI "void \fBsetPos\fP (int x, int y)"
.br
.ti -1c
.RI "\fBPosition\fP \fBmult\fP (int m)"
.br
.ti -1c
.RI "\fBPosition\fP \fBdiv\fP (int d)"
.br
.ti -1c
.RI "boolean \fBinRange\fP (\fBPosition\fP topRight, \fBPosition\fP botLeft)"
.br
.ti -1c
.RI "boolean \fBisEqual\fP (\fBPosition\fP pos)"
.br
.ti -1c
.RI "String \fBtoString\fP ()"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBPosition\fP \fBsubtract\fP (\fBPosition\fP pos1, \fBPosition\fP pos2)"
.br
.ti -1c
.RI "static \fBPosition\fP \fBsum\fP (\fBPosition\fP pos1, \fBPosition\fP pos2)"
.br
.ti -1c
.RI "static \fBPosition\fP \fBmul\fP (\fBPosition\fP pos1, int num)"
.br
.in -1c
.SS "Static Public Attributes"

.in +1c
.ti -1c
.RI "static final \fBPosition\fP \fBZERO\fP = new \fBPosition\fP(0)"
.br
.RI "Default position\&. Origin\&. "
.in -1c
.SH "Detailed Description"
.PP 
Position Represents a 2D point, and has methods to operate with them\&. 


.PP
\fBAuthor\fP
.RS 4
gabriel 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "Basics\&.Position\&.Position ()"
Default constructor 
.SS "Basics\&.Position\&.Position (int n)"
Constructor with one parameter 
.PP
\fBParameters\fP
.RS 4
\fIn\fP This number will be the x and y coordinates 
.RE
.PP

.SS "Basics\&.Position\&.Position (int x, int y)"
Parameter given the two coordinates 
.PP
\fBParameters\fP
.RS 4
\fIx\fP x coordinate 
.br
\fIy\fP y coordinate 
.RE
.PP

.SS "Basics\&.Position\&.Position (\fBPosition\fP p)"
Copy constructor 
.PP
\fBParameters\fP
.RS 4
\fIp\fP Position that will be copied 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "static \fBPosition\fP Basics\&.Position\&.subtract (\fBPosition\fP pos1, \fBPosition\fP pos2)\fC [static]\fP"
Static method to subtract position 
.PP
\fBParameters\fP
.RS 4
\fIpos1\fP Minuend position 
.br
\fIpos2\fP Subtrahend position 
.RE
.PP
\fBReturns\fP
.RS 4
New position with the result of the operation 
.RE
.PP

.SS "static \fBPosition\fP Basics\&.Position\&.sum (\fBPosition\fP pos1, \fBPosition\fP pos2)\fC [static]\fP"
Static method to sum positions 
.PP
\fBParameters\fP
.RS 4
\fIpos1\fP Addend position 
.br
\fIpos2\fP Addend position 
.RE
.PP
\fBReturns\fP
.RS 4
New position with the result of the operation 
.RE
.PP

.SS "static \fBPosition\fP Basics\&.Position\&.mul (\fBPosition\fP pos1, int num)\fC [static]\fP"
Static function to multiply a position with a number (integer) 
.PP
\fBParameters\fP
.RS 4
\fIpos1\fP Position to be multiplied 
.br
\fInum\fP Number that multiply the position 
.RE
.PP
\fBReturns\fP
.RS 4
New position with the result of the operation 
.RE
.PP

.SS "int Basics\&.Position\&.getX ()"
Getter of x 
.PP
\fBReturns\fP
.RS 4
x coordinate 
.RE
.PP

.SS "int Basics\&.Position\&.getY ()"
Getter of y 
.PP
\fBReturns\fP
.RS 4
y coordinate 
.RE
.PP

.SS "void Basics\&.Position\&.setX (int x)"
Setter of x 
.PP
\fBParameters\fP
.RS 4
\fIx\fP New x coordinate 
.RE
.PP

.SS "void Basics\&.Position\&.setY (int y)"
Setter of y 
.PP
\fBParameters\fP
.RS 4
\fIy\fP New y coordinate 
.RE
.PP

.SS "void Basics\&.Position\&.setPos (int x, int y)"
Setter for a position 
.PP
\fBParameters\fP
.RS 4
\fIx\fP New x coordinate 
.br
\fIy\fP New y coordinate 
.RE
.PP

.SS "\fBPosition\fP Basics\&.Position\&.mult (int m)"
Multiplication of the position with a integer\&. Be careful, this method MODIFY the point\&. 
.PP
\fBParameters\fP
.RS 4
\fIm\fP Number that multiply the position 
.RE
.PP
\fBReturns\fP
.RS 4
This position multiplied 
.RE
.PP

.SS "\fBPosition\fP Basics\&.Position\&.div (int d)"
Division of the position with an integer Be careful, this method MODIFY the point\&. 
.PP
\fBParameters\fP
.RS 4
\fId\fP Number that divides the position 
.RE
.PP
\fBReturns\fP
.RS 4
This position multiplied 
.RE
.PP

.SS "boolean Basics\&.Position\&.inRange (\fBPosition\fP topRight, \fBPosition\fP botLeft)"
Checks if the point is 'inside' the square made by the two corners given 
.PP
\fBParameters\fP
.RS 4
\fItopRight\fP Top right corner of the 'square', included 
.br
\fIbotLeft\fP Bottom left corner of the 'square' 
.RE
.PP
\fBReturns\fP
.RS 4
Returns true if the position is in the 'square' and false in other case\&. 
.RE
.PP

.SS "boolean Basics\&.Position\&.isEqual (\fBPosition\fP pos)"
Checks if two points have the same coordinates 
.PP
\fBParameters\fP
.RS 4
\fIpos\fP Position to be compared 
.RE
.PP
\fBReturns\fP
.RS 4
True if coordinates are the same, false if not 
.RE
.PP

.SS "String Basics\&.Position\&.toString ()"
toString method for Position
.PP
\fBReturns\fP
.RS 4
A string with format (x,y) 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for My Project from the source code\&.
